// <auto-generated />
using System;
using CDOProspectClient.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CDOProspectClient.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230122102803_BriefingCreation")]
    partial class BriefingCreation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.Agent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.Briefing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Block")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BriefedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Broker")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Conforme")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DirectSeller")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Financing")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Lot")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PH")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("RequirementId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ReservationDocuments")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SalesChannel")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Witness")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("RequirementId")
                        .IsUnique();

                    b.ToTable("Briefings");
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.BuyerInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("BriefingId")
                        .HasColumnType("int");

                    b.Property<string>("Citizenship")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CivilStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Facebook")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Financing")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("ScreeningId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BriefingId")
                        .IsUnique();

                    b.HasIndex("ScreeningId")
                        .IsUnique();

                    b.ToTable("BuyerInformations");
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.Computation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Discount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("EMA")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("GrossIncome")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MonthlyIncomeRatio")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NetSellingPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NumberOfDownpayments")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ScreeningId")
                        .HasColumnType("int");

                    b.Property<decimal>("SellingPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxesAndFees")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalReceivable")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ScreeningId")
                        .IsUnique();

                    b.ToTable("Computations");
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ScreeningId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ScreeningId")
                        .IsUnique();

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.EmployerDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("BuyerInformationId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImmedaiteSuperior")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("BuyerInformationId")
                        .IsUnique();

                    b.ToTable("EmployerDetail");
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.LocallyEmployed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Compensation")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LatestITR")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("SourceOfIncomeId")
                        .HasColumnType("int");

                    b.Property<bool>("ThreeMonthsOfPayslips")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("SourceOfIncomeId")
                        .IsUnique();

                    b.ToTable("LocallyEmployed");
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.NegativeDataBankRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("BouncedCheck")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("BuyerInformationId")
                        .HasColumnType("int");

                    b.Property<bool>("CancelledCreditCard")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Others")
                        .HasColumnType("longtext");

                    b.Property<bool>("PendingCourtCases")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("UnpaidTelecomBill")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("BuyerInformationId")
                        .IsUnique();

                    b.ToTable("NegativeDataBankRecord");
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.OverseasFilipinoWorker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("BankStatements")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("NCEC")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("PassportWithEntryAndExit")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("SourceOfIncomeId")
                        .HasColumnType("int");

                    b.Property<bool>("ThreeMonthsPayslipsOrRemittance")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("SourceOfIncomeId")
                        .IsUnique();

                    b.ToTable("OverseasFilipinoWorker");
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.PagIbigMembership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BuyerInformationId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfYears")
                        .HasColumnType("int");

                    b.Property<bool>("PagIBIGMembership")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Updated")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("WFHL")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("WOHML")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("BuyerInformationId")
                        .IsUnique();

                    b.ToTable("PagIbigMembership");
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProfileImageLink")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AssignedTo")
                        .HasColumnType("int");

                    b.Property<bool>("Available")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PropertyTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssignedTo");

                    b.HasIndex("PropertyTypeId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.PropertyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("PropertyTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Single Unit"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Combined Unit"
                        });
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.Requirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Requirements");
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.Screening", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Conforme")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InterviewedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Remarks")
                        .HasColumnType("longtext");

                    b.Property<int>("RequirementId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequirementId")
                        .IsUnique();

                    b.ToTable("Screenings");
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.SelfEmployed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("SourceOfIncomeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SourceOfIncomeId")
                        .IsUnique();

                    b.ToTable("SelfEmployed");
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.SelfEmployedFormal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Latest2YearsAFS")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Latest2YearsITR")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Latest6MonthsBankStatements")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("SelfEmployedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SelfEmployedId")
                        .IsUnique();

                    b.ToTable("SelfEmployedFormal");
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.SelfEmployedInformal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("COEIdOfSignatory")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("COEOtherAttachments")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("SelfEmployedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SelfEmployedId")
                        .IsUnique();

                    b.ToTable("SelfEmployedInformal");
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.SourceOfIncome", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId")
                        .IsUnique();

                    b.ToTable("SourceOfIncome");
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.StandardDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AuthorizeRepresentative")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BankAndPagIbigSPA")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BirthCertificate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ClearOneByOnePicture")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<string>("GovtIssuedSpouseValidIds")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("GovtIssuedValidIds")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MarriageCertificate")
                        .HasColumnType("longtext");

                    b.Property<string>("OathOfAllegianceOrAffidavitOfCitizenship")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Others")
                        .HasColumnType("longtext");

                    b.Property<string>("PostDatedChecks")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProofOfMailingOrBilling")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SPANotarizedAndConsularized")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TINNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId")
                        .IsUnique();

                    b.ToTable("StandardDocument");
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.TitlingInstruction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BuyerInformationId")
                        .HasColumnType("int");

                    b.Property<string>("Data")
                        .HasColumnType("longtext");

                    b.Property<string>("TitlingInstructionOption")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("BuyerInformationId")
                        .IsUnique();

                    b.ToTable("TitlingInstruction");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.Agent", b =>
                {
                    b.HasOne("CDOProspectClient.Infrastructure.Data.Models.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.Briefing", b =>
                {
                    b.HasOne("CDOProspectClient.Infrastructure.Data.Models.Requirement", "Requirement")
                        .WithOne("Briefing")
                        .HasForeignKey("CDOProspectClient.Infrastructure.Data.Models.Briefing", "RequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Requirement");
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.BuyerInformation", b =>
                {
                    b.HasOne("CDOProspectClient.Infrastructure.Data.Models.Briefing", "Briefing")
                        .WithOne("Buyer")
                        .HasForeignKey("CDOProspectClient.Infrastructure.Data.Models.BuyerInformation", "BriefingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDOProspectClient.Infrastructure.Data.Models.Screening", "Screening")
                        .WithOne("BuyerInformation")
                        .HasForeignKey("CDOProspectClient.Infrastructure.Data.Models.BuyerInformation", "ScreeningId");

                    b.Navigation("Briefing");

                    b.Navigation("Screening");
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.Computation", b =>
                {
                    b.HasOne("CDOProspectClient.Infrastructure.Data.Models.Screening", "Screening")
                        .WithOne("Computation")
                        .HasForeignKey("CDOProspectClient.Infrastructure.Data.Models.Computation", "ScreeningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Screening");
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.Document", b =>
                {
                    b.HasOne("CDOProspectClient.Infrastructure.Data.Models.Screening", "Screening")
                        .WithOne("Document")
                        .HasForeignKey("CDOProspectClient.Infrastructure.Data.Models.Document", "ScreeningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Screening");
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.EmployerDetail", b =>
                {
                    b.HasOne("CDOProspectClient.Infrastructure.Data.Models.BuyerInformation", "BuyerInformation")
                        .WithOne("EmployerDetails")
                        .HasForeignKey("CDOProspectClient.Infrastructure.Data.Models.EmployerDetail", "BuyerInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BuyerInformation");
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.LocallyEmployed", b =>
                {
                    b.HasOne("CDOProspectClient.Infrastructure.Data.Models.SourceOfIncome", "SourceOfIncome")
                        .WithOne("LocallyEmployed")
                        .HasForeignKey("CDOProspectClient.Infrastructure.Data.Models.LocallyEmployed", "SourceOfIncomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SourceOfIncome");
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.NegativeDataBankRecord", b =>
                {
                    b.HasOne("CDOProspectClient.Infrastructure.Data.Models.BuyerInformation", "BuyerInformation")
                        .WithOne("NegativeDataBankRecord")
                        .HasForeignKey("CDOProspectClient.Infrastructure.Data.Models.NegativeDataBankRecord", "BuyerInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BuyerInformation");
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.OverseasFilipinoWorker", b =>
                {
                    b.HasOne("CDOProspectClient.Infrastructure.Data.Models.SourceOfIncome", "SourceOfIncome")
                        .WithOne("OverseasFilipinoWorker")
                        .HasForeignKey("CDOProspectClient.Infrastructure.Data.Models.OverseasFilipinoWorker", "SourceOfIncomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SourceOfIncome");
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.PagIbigMembership", b =>
                {
                    b.HasOne("CDOProspectClient.Infrastructure.Data.Models.BuyerInformation", "BuyerInformation")
                        .WithOne("PagIbigMembership")
                        .HasForeignKey("CDOProspectClient.Infrastructure.Data.Models.PagIbigMembership", "BuyerInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BuyerInformation");
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.Property", b =>
                {
                    b.HasOne("CDOProspectClient.Infrastructure.Data.Models.Agent", "Agent")
                        .WithMany("Properties")
                        .HasForeignKey("AssignedTo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDOProspectClient.Infrastructure.Data.Models.PropertyType", "PropertyType")
                        .WithMany()
                        .HasForeignKey("PropertyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("PropertyType");
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.Screening", b =>
                {
                    b.HasOne("CDOProspectClient.Infrastructure.Data.Models.Requirement", "Requirement")
                        .WithOne("Screening")
                        .HasForeignKey("CDOProspectClient.Infrastructure.Data.Models.Screening", "RequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Requirement");
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.SelfEmployed", b =>
                {
                    b.HasOne("CDOProspectClient.Infrastructure.Data.Models.SourceOfIncome", "SourceOfIncome")
                        .WithOne("SelfEmployed")
                        .HasForeignKey("CDOProspectClient.Infrastructure.Data.Models.SelfEmployed", "SourceOfIncomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SourceOfIncome");
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.SelfEmployedFormal", b =>
                {
                    b.HasOne("CDOProspectClient.Infrastructure.Data.Models.SelfEmployed", "SelfEmployed")
                        .WithOne("Formal")
                        .HasForeignKey("CDOProspectClient.Infrastructure.Data.Models.SelfEmployedFormal", "SelfEmployedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SelfEmployed");
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.SelfEmployedInformal", b =>
                {
                    b.HasOne("CDOProspectClient.Infrastructure.Data.Models.SelfEmployed", "SelfEmployed")
                        .WithOne("Informal")
                        .HasForeignKey("CDOProspectClient.Infrastructure.Data.Models.SelfEmployedInformal", "SelfEmployedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SelfEmployed");
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.SourceOfIncome", b =>
                {
                    b.HasOne("CDOProspectClient.Infrastructure.Data.Models.Document", "Document")
                        .WithOne("SourceOfIncome")
                        .HasForeignKey("CDOProspectClient.Infrastructure.Data.Models.SourceOfIncome", "DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.StandardDocument", b =>
                {
                    b.HasOne("CDOProspectClient.Infrastructure.Data.Models.Document", "Document")
                        .WithOne("StandardDocument")
                        .HasForeignKey("CDOProspectClient.Infrastructure.Data.Models.StandardDocument", "DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.TitlingInstruction", b =>
                {
                    b.HasOne("CDOProspectClient.Infrastructure.Data.Models.BuyerInformation", "BuyerInformation")
                        .WithOne("TitlingInstruction")
                        .HasForeignKey("CDOProspectClient.Infrastructure.Data.Models.TitlingInstruction", "BuyerInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BuyerInformation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.Agent", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.Briefing", b =>
                {
                    b.Navigation("Buyer")
                        .IsRequired();
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.BuyerInformation", b =>
                {
                    b.Navigation("EmployerDetails")
                        .IsRequired();

                    b.Navigation("NegativeDataBankRecord")
                        .IsRequired();

                    b.Navigation("PagIbigMembership")
                        .IsRequired();

                    b.Navigation("TitlingInstruction")
                        .IsRequired();
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.Document", b =>
                {
                    b.Navigation("SourceOfIncome")
                        .IsRequired();

                    b.Navigation("StandardDocument")
                        .IsRequired();
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.Requirement", b =>
                {
                    b.Navigation("Briefing")
                        .IsRequired();

                    b.Navigation("Screening")
                        .IsRequired();
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.Screening", b =>
                {
                    b.Navigation("BuyerInformation")
                        .IsRequired();

                    b.Navigation("Computation")
                        .IsRequired();

                    b.Navigation("Document")
                        .IsRequired();
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.SelfEmployed", b =>
                {
                    b.Navigation("Formal")
                        .IsRequired();

                    b.Navigation("Informal")
                        .IsRequired();
                });

            modelBuilder.Entity("CDOProspectClient.Infrastructure.Data.Models.SourceOfIncome", b =>
                {
                    b.Navigation("LocallyEmployed")
                        .IsRequired();

                    b.Navigation("OverseasFilipinoWorker")
                        .IsRequired();

                    b.Navigation("SelfEmployed")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
